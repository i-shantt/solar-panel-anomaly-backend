# -*- coding: utf-8 -*-
"""Solar Panel Anomaly Detection with Isolation Forest

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fsUFB-_H2ULNv61T975ZgLgNMqy5STZY
"""

!pip install pandas numpy matplotlib seaborn scikit-learn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import IsolationForest

# --- 1. Data Loading and Initial Exploration ---
# Download the dataset from: https://www.kaggle.com/datasets/anikannal/solar-power-generation-data
# Make sure to place 'Plant_1_Generation_Data.csv' in the same directory as this script.

try:
    # Load the dataset
    df = pd.read_csv('Plant_1_Generation_Data.csv')
except FileNotFoundError:
    print("Error: 'Plant_1_Generation_Data.csv' not found.")
    print("Please download the dataset from https://www.kaggle.com/datasets/anikannal/solar-power-generation-data and place it in the correct directory.")
    exit()

print("--- Initial Data Head ---")
print(df.head())
print("\n--- Data Info ---")
df.info()

# Convert 'DATE_TIME' to datetime objects for time-series analysis
df['DATE_TIME'] = pd.to_datetime(df['DATE_TIME'], format='%d-%m-%Y %H:%M')


df.set_index('DATE_TIME', inplace=True)

# Convert data from 15-minute intervals to hourly intervals
df_hourly = df.resample('H').agg({
    'DC_POWER': 'mean',
    'AC_POWER': 'mean',
    'DAILY_YIELD': 'max',
    'TOTAL_YIELD': 'max'
}).dropna() # Drop hours with no data (e.g., overnight)

print("\n--- Resampled Hourly Data Head ---")
print(df_hourly.head())

# Create time-based features that might influence power generation.
# These features help the model understand the time context of each data point.
df_hourly['hour'] = df_hourly.index.hour
df_hourly['dayofweek'] = df_hourly.index.dayofweek # Monday=0, Sunday=6
df_hourly['dayofyear'] = df_hourly.index.dayofyear
df_hourly['month'] = df_hourly.index.month

# --- 3. Anomaly Detection with Isolation Forest ---

# Select features for the model. We use power output and the time-based features.
# This helps the model learn what "normal" power output looks like at a specific time.
features = ['AC_POWER', 'DC_POWER', 'hour', 'dayofweek']

# Initialize the Isolation Forest model
# The 'contamination' parameter is the expected proportion of anomalies in the dataset.
# This is a key hyperparameter to tune. We'll start with 5%.
# The value is inspired by your screenshot and is a common starting point.
model = IsolationForest(n_estimators=100, contamination=0.05, random_state=42)

# Fit the model to our data
model.fit(df_hourly[features])

# Predict the anomalies. The model returns -1 for anomalies and 1 for normal data points.
df_hourly['anomaly'] = model.predict(df_hourly[features])

# Create a separate column for easier plotting
df_hourly['is_anomaly'] = df_hourly['anomaly'] == -1

print("\n--- Data with Anomaly Predictions ---")
# Display some of the detected anomalies
print(df_hourly[df_hourly['is_anomaly']].head())

# --- 4. Visualization of Results ---

print("\nGenerating plot...")

# Create a plot to visualize the AC power generation and the detected anomalies
plt.style.use('seaborn-v0_8-whitegrid')
fig, ax = plt.subplots(figsize=(20, 8))

# Plot the AC power time series
ax.plot(df_hourly.index, df_hourly['AC_POWER'], color='dodgerblue', label='Normal AC Power')

# Overlay the anomalies as red scatter points
anomalies = df_hourly[df_hourly['is_anomaly']]
ax.scatter(anomalies.index, anomalies['AC_POWER'], color='red', s=50, label='Anomaly Detected', zorder=5)

# Formatting the plot for clarity
ax.set_title('Solar Panel Anomaly Detection (AC Power)', fontsize=18)
ax.set_xlabel('Date and Time', fontsize=12)
ax.set_ylabel('AC Power (kW)', fontsize=12)
ax.legend(fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()

# Display the plot
plt.show()

print("\n--- Analysis Complete ---")
print(f"Total data points: {len(df_hourly)}")
print(f"Number of anomalies detected: {len(anomalies)}")
print(f"Percentage of anomalies: {len(anomalies) / len(df_hourly) * 100:.2f}%")