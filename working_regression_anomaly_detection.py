# -*- coding: utf-8 -*-
"""Working Regression Anomaly Detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XUc4AAFGKRMIM2757ObMMp2zeuQEXIEw
"""

!pip install pandas numpy scikit-learn matplotlib

import pandas as pd
import numpy as np
from sklearn.ensemble import GradientBoostingRegressor
import matplotlib.pyplot as plt

def train_regression_model(generation_path, weather_path):
    """
    Loads and merges data, then trains a regression model to predict power from weather.
    It calculates a dynamic threshold for anomaly detection based on prediction errors.

    Returns:
        (GradientBoostingRegressor, float, pd.DataFrame): A tuple containing the trained model,
        the anomaly threshold, and the training data for visualization.
    """
    # --- 1. Load and Merge Data ---
    print("Loading power generation and weather data...")
    try:
        df_gen = pd.read_csv(generation_path)
        df_weather = pd.read_csv(weather_path)
    except FileNotFoundError as e:
        print(f"Error: {e.filename} not found. Please ensure both CSV files are available.")
        return None, None, None

    # Convert DATE_TIME columns to datetime objects
    df_gen['DATE_TIME'] = pd.to_datetime(df_gen['DATE_TIME'], format='%d-%m-%Y %H:%M')
    df_weather['DATE_TIME'] = pd.to_datetime(df_weather['DATE_TIME'], format='%Y-%m-%d %H:%M:%S')

    # Merge the two dataframes on the nearest timestamp
    df_merged = pd.merge_asof(df_gen.sort_values('DATE_TIME'), df_weather.sort_values('DATE_TIME'), on='DATE_TIME')
    df_merged.dropna(inplace=True)

    # --- 2. Train Weather-Based Prediction Model ---
    print("Training a regression model to learn the relationship between weather and power...")

    weather_features = ['AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE', 'IRRADIATION']
    target = 'AC_POWER'

    # We only want to learn from daytime data where generation is expected
    training_data = df_merged[df_merged['IRRADIATION'] > 0.1].copy()

    # Initialize and train the Gradient Boosting Regressor
    regression_model = GradientBoostingRegressor(n_estimators=100, random_state=42)
    regression_model.fit(training_data[weather_features], training_data[target])

    # --- 3. Establish Anomaly Threshold ---
    print("Calculating anomaly threshold based on prediction errors...")

    # Predict on the training data to find normal error levels
    predictions = regression_model.predict(training_data[weather_features])
    # Calculate the error (residuals)
    training_data['residuals'] = training_data[target] - predictions

    # The threshold is 3 standard deviations from the mean error
    residual_std = training_data['residuals'].std()
    threshold = residual_std * 3

    print(f"Anomaly threshold established: Any deviation greater than {threshold:.2f} kW will be flagged.")

    return regression_model, threshold, training_data

def is_anomaly_with_regression(ac_power, irradiation, ambient_temp, module_temp, model, threshold):
    """
    Checks if a single data point is an anomaly using a regression model and a fixed threshold.

    Returns:
        bool: True if the point is an anomaly, False otherwise.
    """
    # Create a DataFrame for the single point
    data = {
        'AMBIENT_TEMPERATURE': [ambient_temp],
        'MODULE_TEMPERATURE': [module_temp],
        'IRRADIATION': [irradiation]
    }
    point_df = pd.DataFrame(data)

    # Predict what the power *should* be based on the weather
    expected_power = model.predict(point_df)[0]

    # Calculate the absolute error (residual)
    absolute_error = abs(ac_power - expected_power)

    # Compare the error to our threshold
    return absolute_error > threshold

# --- Main Execution Block ---
if __name__ == '__main__':
    print("--- Initializing Regression-Based Anomaly Detection System ---")

    # Train our model and get the dynamic threshold
    regression_model, anomaly_threshold, training_data_for_viz = train_regression_model(
        generation_path='Plant_1_Generation_Data.csv',
        weather_path='Plant_1_Weather_Sensor_Data.csv'
    )

    if regression_model:
        print("\n--- System Ready. Performing checks on new data points. ---")

        test_cases = {
            "Normal Cloudy Day": {'ac_power': 150.0, 'irradiation': 0.2, 'ambient_temp': 22.0, 'module_temp': 28.0},
            "Anomalous Sunny Day": {'ac_power': 200.0, 'irradiation': 0.85, 'ambient_temp': 30.0, 'module_temp': 45.0},
            "Normal Sunny Day": {'ac_power': 1250.0, 'irradiation': 0.9, 'ambient_temp': 32.0, 'module_temp': 50.0},
            "Impossible Spike": {'ac_power': 5000.0, 'irradiation': 0.9, 'ambient_temp': 32.0, 'module_temp': 50.0}
        }

        results = {}
        for name, data in test_cases.items():
            is_anom = is_anomaly_with_regression(model=regression_model, threshold=anomaly_threshold, **data)
            results[name] = {'is_anomaly': is_anom, **data}
            print(f"Check '{name}': Is it an anomaly? -> {is_anom}")

        # --- Visualization ---
        print("\nGenerating visualization...")
        plt.style.use('seaborn-v0_8-whitegrid')
        plt.figure(figsize=(12, 8))

        # Plot the normal operating conditions
        plt.scatter(training_data_for_viz['IRRADIATION'], training_data_for_viz['AC_POWER'],
                    alpha=0.3, c='gray', label='Normal Training Data')

        # Plot the test cases
        for name, res in results.items():
            color = 'red' if res['is_anomaly'] else 'green'
            marker = 'x' if res['is_anomaly'] else 'o'
            plt.scatter(res['irradiation'], res['ac_power'], c=color, marker=marker, s=150, label=name, edgecolors='black')

        plt.title('Anomaly Detection Using Regression Residuals', fontsize=18)
        plt.xlabel('Irradiation', fontsize=12)
        plt.ylabel('AC Power (kW)', fontsize=12)
        plt.legend()
        plt.grid(True)
        plt.show()

    print("\n--- Process Complete ---")