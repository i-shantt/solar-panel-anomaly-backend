# -*- coding: utf-8 -*-
"""Synthetic Power and Weather Data Generator

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CoUBO2jk19MhBdJSQU_KzrpZSRptker5
"""

!pip install pandas numpy scikit-learn matplotlib

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def generate_synthetic_data_for_testing(days=10, start_date='2020-08-01'):
    """
    Generates two synthetic CSV files: one for power generation and one for weather,
    with known anomalies injected for testing purposes.
    """
    print("Generating synthetic weather and power datasets...")

    # --- 1. Create a baseline time index ---
    date_rng = pd.date_range(start=start_date, periods=days * 24 * 4, freq='15min')
    df = pd.DataFrame(date_rng, columns=['DATE_TIME'])
    df.set_index('DATE_TIME', inplace=True)

    # --- 2. Generate Realistic Weather Data ---
    # Create a daily cycle for temperature and irradiation
    hours = df.index.hour + df.index.minute / 60.0

    # Irradiation: Sine wave for daily cycle + noise
    irradiation = np.sin((hours - 6) * np.pi / 12) * 0.9 + np.random.normal(0, 0.02, len(df))
    # Modify the numpy array before assigning it to the DataFrame column


    df['IRRADIATION'] = irradiation
    df.loc[df['IRRADIATION'] < 0, 'IRRADIATION'] = 0

    # Display the first few rows to show the change (optional)
    display(df.head())

    # Ambient Temperature: Sine wave for daily cycle + seasonal trend + noise
    day_of_year = df.index.dayofyear
    ambient_temp = np.sin((hours - 8) * np.pi / 12) * 8 + 15 - np.cos(day_of_year * 2 * np.pi / 365) * 5
    df['AMBIENT_TEMPERATURE'] = ambient_temp + np.random.normal(0, 0.5, len(df))

    # Module Temperature: Typically higher than ambient, especially with sun
    df['MODULE_TEMPERATURE'] = df['AMBIENT_TEMPERATURE'] + df['IRRADIATION'] * 20 + np.random.normal(0, 1, len(df))

    # --- 3. Inject a "Cloudy Day" Weather Anomaly ---
    # On day 3, make it very cloudy (low irradiation)
    cloudy_day_start = pd.to_datetime(start_date) + pd.Timedelta(days=2, hours=8)
    cloudy_day_end = cloudy_day_start + pd.Timedelta(hours=8)
    df.loc[cloudy_day_start:cloudy_day_end, 'IRRADIATION'] *= 0.2
    print(f"- Injected a 'Cloudy Day' into the weather data on {cloudy_day_start.date()}.")


    # --- 4. Generate Power Data based on Weather (with anomalies) ---
    # The "true" relationship: power is mostly dependent on irradiation, with a small temp factor
    ac_power = (df['IRRADIATION'] * 1400 - (df['MODULE_TEMPERATURE'] - 25) * 5) + np.random.normal(0, 10, len(df))
    # Modify the numpy array before assigning it to the DataFrame column
    ac_power[ac_power < 0] = 0 # Applying the modification here
    df['AC_POWER'] = ac_power

    # --- 5. Inject Power Anomalies ---

    # Anomaly 1: Equipment Failure (power drops to zero despite sun)
    failure_start = pd.to_datetime(start_date) + pd.Timedelta(days=4, hours=11)
    failure_end = failure_start + pd.Timedelta(hours=4)
    df.loc[failure_start:failure_end, 'AC_POWER'] = 0
    print(f"- Injected 'Equipment Failure' power anomaly on {failure_start.date()}.")

    # Anomaly 2: Sensor Spike (power is impossibly high)
    spike_time = pd.to_datetime(start_date) + pd.Timedelta(days=6, hours=13)
    df.loc[spike_time, 'AC_POWER'] = 4000
    print(f"- Injected 'Sensor Spike' power anomaly on {spike_time.date()}.")

    # Anomaly 3: Degraded Performance (power is too low for the sunny weather)
    degraded_start = pd.to_datetime(start_date) + pd.Timedelta(days=8, hours=10)
    degraded_end = degraded_start + pd.Timedelta(hours=5)
    df.loc[degraded_start:degraded_end, 'AC_POWER'] *= 0.3 # Panel is only 30% efficient
    print(f"- Injected 'Degraded Performance' power anomaly on {degraded_start.date()}.")


    # --- 6. Finalize and Split DataFrames ---
    # Create DC Power and Yields for the generation file
    df['DC_POWER'] = df['AC_POWER'] * 1.1
    df['DAILY_YIELD'] = df.groupby(df.index.floor('D'))['AC_POWER'].cumsum() / 4
    df['TOTAL_YIELD'] = df['AC_POWER'].cumsum() / 4
    df['PLANT_ID'] = 4135001
    df['SOURCE_KEY'] = 'SYNTHETIC_INVERTER'

    # Create the two separate dataframes
    generation_cols = ['DATE_TIME', 'PLANT_ID', 'SOURCE_KEY', 'DC_POWER', 'AC_POWER', 'DAILY_YIELD', 'TOTAL_YIELD']
    weather_cols = ['DATE_TIME', 'AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE', 'IRRADIATION']

    df_gen_synthetic = df.reset_index()[generation_cols]
    df_weather_synthetic = df.reset_index()[weather_cols]

    return df_gen_synthetic, df_weather_synthetic

# --- Main execution block ---
if __name__ == '__main__':
    # Generate the data
    synthetic_gen_df, synthetic_weather_df = generate_synthetic_data_for_testing()

    # Save the files
    gen_filename = 'Synthetic_Generation_Data.csv'
    weather_filename = 'Synthetic_Weather_Data.csv'

    synthetic_gen_df.to_csv(gen_filename, index=False, date_format='%Y-%m-%d %H:%M:%S')
    synthetic_weather_df.to_csv(weather_filename, index=False, date_format='%Y-%m-%d %H:%M:%S')

    print(f"\nSuccessfully saved synthetic data to:")
    print(f"- {gen_filename}")
    print(f"- {weather_filename}")

    # --- Visualization to confirm data looks correct ---
    fig, axs = plt.subplots(2, 1, figsize=(20, 10), sharex=True)

    # Plot Power
    axs[0].plot(pd.to_datetime(synthetic_gen_df['DATE_TIME']), synthetic_gen_df['AC_POWER'], color='dodgerblue')
    axs[0].set_title('Synthetic AC Power (with Anomalies)', fontsize=16)
    axs[0].set_ylabel('AC Power (kW)')
    axs[0].grid(True)

    # Plot Irradiation
    axs[1].plot(pd.to_datetime(synthetic_weather_df['DATE_TIME']), synthetic_weather_df['IRRADIATION'], color='orange')
    axs[1].set_title('Synthetic Weather (Irradiation)', fontsize=16)
    axs[1].set_ylabel('Irradiation')
    axs[1].grid(True)

    plt.xlabel('Date and Time')
    plt.tight_layout()
    plt.show()