# -*- coding: utf-8 -*-
"""Regression-Based Anomaly Detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10kWkvzSvVeZ07APpAACZDXTB-4pfgv73
"""

!pip install pandas numpy scikit-learn matplotlib

import pandas as pd
import numpy as np
from sklearn.ensemble import GradientBoostingRegressor
import matplotlib.pyplot as plt

def train_regression_model(generation_path, weather_path):
    """
    Loads and merges data, then trains a regression model to predict power from weather.
    It calculates a dynamic threshold and the plant's peak capacity.

    Returns:
        (GradientBoostingRegressor, float, float): A tuple containing the trained model,
        the anomaly threshold, and the plant's estimated peak capacity (kWp).
    """
    # --- 1. Load and Merge Data ---
    print("Loading power generation and weather data...")
    try:
        df_gen = pd.read_csv(generation_path)
        df_weather = pd.read_csv(weather_path)
    except FileNotFoundError as e:
        print(f"Error: {e.filename} not found. Please ensure both CSV files are available.")
        return None, None, None

    # Convert DATE_TIME columns to datetime objects
    df_gen['DATE_TIME'] = pd.to_datetime(df_gen['DATE_TIME'], format='%d-%m-%Y %H:%M')
    df_weather['DATE_TIME'] = pd.to_datetime(df_weather['DATE_TIME'], format='%Y-%m-%d %H:%M:%S')

    # Merge the two dataframes on the nearest timestamp
    df_merged = pd.merge_asof(df_gen.sort_values('DATE_TIME'), df_weather.sort_values('DATE_TIME'), on='DATE_TIME')
    df_merged.dropna(inplace=True)

    # --- 2. Train Weather-Based Prediction Model ---
    print("Training a regression model to learn the relationship between weather and power...")
    weather_features = ['AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE', 'IRRADIATION']
    target = 'AC_POWER'
    training_data = df_merged[df_merged['IRRADIATION'] > 0.1].copy()

    regression_model = GradientBoostingRegressor(n_estimators=100, random_state=42)
    regression_model.fit(training_data[weather_features], training_data[target])

    # --- 3. Establish Anomaly Threshold and Plant Capacity ---
    print("Calculating anomaly threshold and plant capacity...")
    predictions = regression_model.predict(training_data[weather_features])
    training_data['residuals'] = training_data[target] - predictions
    residual_std = training_data['residuals'].std()
    threshold = residual_std * 3
    plant_capacity_kwp = df_gen['DC_POWER'].max()

    print(f"Anomaly threshold established: Any deviation greater than {threshold:.2f} kW will be flagged.")
    print(f"Estimated Plant Capacity (kWp): {plant_capacity_kwp:.2f}")

    return regression_model, threshold, plant_capacity_kwp

def is_anomaly_with_regression(ac_power, irradiation, ambient_temp, module_temp, model, threshold):
    """
    Checks if a single data point is an anomaly using a regression model and a fixed threshold.
    """
    weather_features = ['AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE', 'IRRADIATION']
    data = {'IRRADIATION': [irradiation], 'AMBIENT_TEMPERATURE': [ambient_temp], 'MODULE_TEMPERATURE': [module_temp]}
    point_df = pd.DataFrame(data)
    expected_power = model.predict(point_df[weather_features])[0]
    absolute_error = abs(ac_power - expected_power)
    return absolute_error > threshold

def perform_data_analysis(df, plant_capacity_kwp):
    """Calculates KPIs from the provided data and returns them as a dictionary."""
    analysis = {}
    # Energy and Power Metrics
    analysis['Total Energy Output (kWh)'] = df['AC_POWER'].sum() / 4 # Data is 15-min intervals
    analysis['Peak AC Power (kW)'] = df['AC_POWER'].max()
    analysis['Specific Yield (kWh/kWp)'] = analysis['Total Energy Output (kWh)'] / plant_capacity_kwp if plant_capacity_kwp > 0 else 0

    # Weather Metrics
    analysis['Average Irradiation'] = df['IRRADIATION'].mean()
    analysis['Average Module Temperature (°C)'] = df['MODULE_TEMPERATURE'].mean()

    # Performance and Health Metrics
    analysis['Number of Anomalies Detected'] = df['is_anomaly'].sum()
    inferred_downtime_minutes = df[(df['IRRADIATION'] > 0.2) & (df['AC_POWER'] < 1)].shape[0] * 15
    analysis['Inferred Downtime (Minutes)'] = inferred_downtime_minutes
    derating_events = df[(df['IRRADIATION'] > 0.5) & (df['MODULE_TEMPERATURE'] > 60)].shape[0]
    analysis['High-Temp Derating Events'] = derating_events

    return analysis

def check_files_for_anomalies(generation_filepath, weather_filepath, model, threshold, plant_capacity_kwp):
    """
    Reads, validates, and merges files, checks for anomalies, visualizes, and saves all outputs.
    """
    print(f"\n--- Checking files: {generation_filepath} and {weather_filepath} ---")
    try:
        df_gen_check = pd.read_csv(generation_filepath)
        df_weather_check = pd.read_csv(weather_filepath)

        # --- Validation ---
        if df_gen_check.empty or df_weather_check.empty:
            print("Error: One or both of the provided CSV files are empty.")
            return

        gen_cols = ['DATE_TIME', 'PLANT_ID', 'SOURCE_KEY', 'DC_POWER', 'AC_POWER', 'DAILY_YIELD', 'TOTAL_YIELD']
        weather_cols = ['DATE_TIME', 'IRRADIATION', 'AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE']

        if not all(col in df_gen_check.columns for col in gen_cols):
            print(f"Error: The generation CSV file must contain the columns: {gen_cols}")
            return
        if not all(col in df_weather_check.columns for col in weather_cols):
            print(f"Error: The weather CSV file must contain the columns: {weather_cols}")
            return

        # --- Preprocessing and Merging ---
        df_gen_check['DATE_TIME'] = pd.to_datetime(df_gen_check['DATE_TIME'])
        df_weather_check['DATE_TIME'] = pd.to_datetime(df_weather_check['DATE_TIME'])
        df_to_check = pd.merge_asof(df_gen_check.sort_values('DATE_TIME'), df_weather_check.sort_values('DATE_TIME'), on='DATE_TIME')
        df_to_check.dropna(inplace=True)

        if df_to_check.empty:
            print("Error: No matching timestamps found between the two files.")
            return

        # --- Anomaly Checking ---
        df_to_check['is_anomaly'] = df_to_check.apply(
            lambda row: is_anomaly_with_regression(
                ac_power=row['AC_POWER'], irradiation=row['IRRADIATION'],
                ambient_temp=row['AMBIENT_TEMPERATURE'], module_temp=row['MODULE_TEMPERATURE'],
                model=model, threshold=threshold
            ), axis=1
        )
        anomalies_df = df_to_check[df_to_check['is_anomaly']]

        # --- Perform and Save Data Analysis ---
        analysis_results = perform_data_analysis(df_to_check, plant_capacity_kwp)
        analysis_df = pd.DataFrame([analysis_results])
        analysis_df.to_csv('data_analysis_summary.csv', index=False)
        print("\nData analysis summary saved to 'data_analysis_summary.csv'")
        print(analysis_df.transpose())

        # --- Save Anomaly Data to Files ---
        if not anomalies_df.empty:
            print(f"\nDetected {len(anomalies_df)} anomalies. Saving them to CSV files...")
            anomalies_df[gen_cols].to_csv('anomalous_power_data.csv', index=False, date_format='%Y-%m-%d %H:%M:%S')
            print("- Saved anomalous power data to 'anomalous_power_data.csv'")
            anomalies_df[weather_cols].to_csv('anomalous_weather_data.csv', index=False, date_format='%Y-%m-%d %H:%M:%S')
            print("- Saved anomalous weather data to 'anomalous_weather_data.csv'")
        else:
            print("\nNo anomalies were detected.")

        # --- Visualization 1: Time Series Multi-Plot ---
        print("\nGenerating time series plot...")
        plt.style.use('dark_background')
        fig, axs = plt.subplots(4, 1, figsize=(15, 12), sharex=True)
        fig.suptitle(f'Analysis for {generation_filepath.split("/")[-1]}', fontsize=18)

        axs[0].plot(df_to_check['DATE_TIME'], df_to_check['AC_POWER'], color='cyan', label='AC Power')
        axs[0].plot(df_to_check['DATE_TIME'], df_to_check['DC_POWER'], color='magenta', label='DC Power', alpha=0.7)
        if not anomalies_df.empty:
            axs[0].scatter(anomalies_df['DATE_TIME'], anomalies_df['AC_POWER'], color='red', s=80, label='Anomaly', zorder=5)
        axs[0].set_ylabel('Power (kW)'); axs[0].legend()

        axs[1].plot(df_to_check['DATE_TIME'], df_to_check['IRRADIATION'], color='orange', label='Irradiation')
        axs[1].set_ylabel('Irradiation'); axs[1].legend()

        axs[2].plot(df_to_check['DATE_TIME'], df_to_check['AMBIENT_TEMPERATURE'], color='lime', label='Ambient Temp')
        axs[2].set_ylabel('Temperature (°C)'); axs[2].legend()

        axs[3].plot(df_to_check['DATE_TIME'], df_to_check['MODULE_TEMPERATURE'], color='yellow', label='Module Temp')
        axs[3].set_ylabel('Temperature (°C)'); axs[3].set_xlabel('Date and Time'); axs[3].legend()

        for ax in axs: ax.grid(True, alpha=0.3)
        plt.xticks(rotation=45); plt.tight_layout(rect=[0, 0.03, 1, 0.97])
        plt.savefig('anomaly_analysis_results.png'); print("\nTime series plot saved to 'anomaly_analysis_results.png'")
        plt.show()

        # --- Visualization 2: Regression Model ---
        print("Generating regression model plot...")
        plt.figure(figsize=(12, 8))
        # FIX: Define weather_features in this scope before using it
        weather_features = ['AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE', 'IRRADIATION']
        ir_range = np.linspace(df_to_check['IRRADIATION'].min(), df_to_check['IRRADIATION'].max(), 100)
        line_data = pd.DataFrame({'IRRADIATION': ir_range, 'AMBIENT_TEMPERATURE': df_to_check['AMBIENT_TEMPERATURE'].mean(), 'MODULE_TEMPERATURE': df_to_check['MODULE_TEMPERATURE'].mean()})
        power_predictions = model.predict(line_data[weather_features])

        plt.scatter(df_to_check['IRRADIATION'], df_to_check['AC_POWER'], alpha=0.3, c='cyan', label='Data Points')
        plt.plot(ir_range, power_predictions, color='magenta', linewidth=3, label='Expected Power (Regression Line)')
        if not anomalies_df.empty:
            plt.scatter(anomalies_df['IRRADIATION'], anomalies_df['AC_POWER'], c='red', marker='x', s=150, label='Anomaly Detected', zorder=5)

        plt.title('Regression Model: Expected Power vs. Actual', fontsize=16)
        plt.xlabel('Irradiation'); plt.ylabel('AC Power (kW)'); plt.legend(); plt.grid(True, alpha=0.3)
        plt.savefig('regression_model_visualization.png'); print("\nRegression plot saved to 'regression_model_visualization.png'")
        plt.show()

    except Exception as e:
        print(f"An unexpected error occurred: {e}")


# --- Main Execution Block ---
if __name__ == '__main__':
    print("--- Initializing Regression-Based Anomaly Detection System ---")

    regression_model, anomaly_threshold, plant_capacity = train_regression_model(
        generation_path='Plant_1_Generation_Data.csv',
        weather_path='Plant_1_Weather_Sensor_Data.csv'
    )

    if regression_model:
        while True:
            print("\n" + "="*50)
            gen_filepath = input("Enter the path to the POWER GENERATION CSV file (or type 'exit' to quit): ")
            if gen_filepath.lower() == 'exit':
                break
            weather_filepath = input("Enter the path to the corresponding WEATHER DATA CSV file: ")
            check_files_for_anomalies(gen_filepath, weather_filepath, regression_model, anomaly_threshold, plant_capacity)

    print("\n--- Process Complete ---")